#+TITLE: GNUstep 開発ノート
* クラス作成のテンプレート作成
クラス名を入力し、ヘッダーとソースの雛形を作成する
引数を渡されなければ、入力を施す。
** mk-objc-common.sh
#+begin_src sh :tangle "./mk-objc-common.sh"
  to_camel_name () {
    echo "$(echo "$1" | sed -r 's/(^|-)(\w)/\U\2/g')"
  }

  to_header_marker () {
    echo "_$(echo "$class_name" | tr '[a-z]' '[A-Z]')_H_"
  }

  emacs_marker () {
    echo "// -*- mode: ObjC -*-"
  }

  vim_marker () {
    echo "// vim: filetype=objc ts=2 sw=2 expandtab"
  }

  make_header() {
  local class_name="$(to_camel_name $1)"
  local header_name="$(to_header_marker $class_name)"
  cat << EOF_H
  $(emacs_marker)
  #ifndef $header_name
  #define $header_name

  #import <Foundation/Foundation.h>

  @interface $class_name : NSObject
  {
    NSString *_name;
  }
  - (instancetype) init;
  - (void) dealloc;
  - (NSString *) name;
  - (void) setName: (NSString *)name;
  @end

  #endif
  $(vim_marker)
  EOF_H
  }

  make_source () {
  class_name="$(to_camel_name $1)"

  cat << EOF_S
  $(emacs_marker)
  #import <Foundation/Foundation.h>
  #import "$class_name.h"

  @implementation $class_name
  - (instancetype) init
  {
    if ((self = [super init]) != nil)
      {
        // implement hear
      }
    return self;
  }

  - (void) dealloc
  {
    RELEASE(_name);
    [super dealloc];
  }

  - (NSString *)name
  {
    return _name;
  }

  - (void) setName: (NSString *)name
  {
    ASSIGNCOPY(_name, name);
  }

  @end

  $(vim_marker)
  EOF_S
  }
#+end_src

** mk-objc-header.sh
#+begin_src sh :tangle "./mk-objc-header.sh" :tangle-mode (identity #o755) :shebang "#!/usr/bin/env sh"

  . "$(dirname $0)/mk-objc-common.sh"

  if [ $# -eq 0 ]; then
      read -p "Enter class name: " class_name
  else
      class_name="$1"
  fi
  make_header "$class_name"
#+end_src
** mk-objc-source.sh
#+begin_src sh :tangle "./mk-objc-source.sh" :tangle-mode (identity #o755) :shebang "#!/usr/bin/env sh"

  . "$(dirname $0)/mk-objc-common.sh"

  if [ $# -eq 0 ]; then
      read -p "Enter class name: " class_name
  else
      class_name="$1"
  fi
  make_source "$class_name"
#+end_src
** mk_objc.sh
#+begin_src sh :tangle "./mk-objc.sh" :tangle-mode (identity #o755) :shebang "#!/usr/bin/env sh"

  . "$(dirname $0)/mk-objc-common.sh"

  if [ $# -eq 0 ]; then
      read -p "Enter class name: " class_name
  else
      class_name="$1"
  fi
  class_name="$(to_camel_name $class_name)"
  header_file="./${class_name}.h"
  if [ -f "$header_file" ]; then
      echo "Header file exists!"
      exit 1
  fi
  source_file="./${class_name}.m"
  if [ -f "$source_file" ]; then
      echo "Source file exists!"
      exit 1
  fi
  make_header "$class_name" > "$header_file"
  make_source "$class_name" > "$source_file"
#+end_src

* 22.04への対応
** TODO mozc の自動ひらがな化
失敗。ibusのバージョンが低いのとactive_on_launchキーがそもそも存在しなかった。
** DONE libobjc2 で clangが <vector> を見つけられない
以下のコードをinstall-gnustep-debian.shに挿入することで必要なライブラリのロードを行った。
#+begin_src sh
  libver=$(clang -v 2>&1 | grep -i "Selected GCC" | awk -F/ '{print $NF}')
  pkg_name="libstdc++-${libver}-dev"
  sudo apt install -y "${pkg_name}" || echo "not found: ${pkg_name}"
#+end_src

* lldb デバッグに関するヒント
- https://github.com/realgud/realgud
- https://gist.github.com/ryanchang/a2f738f0c3cc6fbd71fa
* nfont
GSDEを扱っていて日本語が全く使えないことに気が付き、試しにNotoフォントをインストールしてみたが全く反映されない。
GSDEはnextspaceを使用しているため、gnustep-backend がartを使用している。このartが=nfont=形式を採用している。
nfontに関する情報はインターネット上には少なく、以下を参照している。
- https://github.com/esteve/mknfonts.tool
- file:///home/kenjiro/Documents/github/trunkmaster/nextspace/Documentation/Developer/FontPackages.md

* プレーンな24.04 LTS にいれて確認したこと
** DONE 続行不可な能エラー
- libdispatch: c++ヘッダーやライブラリを認識できていない
- libs-back: x11 で基本的なヘッダーやライブラリが全く入っていない
- libscorebase: objc_getClassがないとか言って､libobjc2がインストールされていないかのような終了の仕方をする｡
上記２つは基本的にライブラリのインストール不足､gs-desktopリポジトリ内のdebian.txtのすべてのコンポーネントを入れたらうまく行った｡
corebaseは放置プロジェクトなので､ついてこれないのもわかる気がする標準インストールからは除外することにする｡

* リポジトリの自動更新
#+begin_src elisp :results list
    (file-name-split
     "~/Documents/github/dylan-lang/opendylan/documentation/sphinx-extensions/.git")
#+end_src

#+RESULTS:
- ~
- Documents
- github
- dylan-lang
- opendylan
- documentation
- sphinx-extensions
- .git

#+begin_src elisp :results list
  (defun top-repo-p (dir)
    (let* ((items (file-name-split dir))
           (repo-name (nth 4 items)))
      (and (<= 6 (length items))
           (not (string-prefix-p "_" repo-name)))))

  (defun find-repos (topdir)
    (mapcar 'file-name-directory
            (directory-files-recursively topdir
                                         "\\.git$"
                                         t
                                         (lambda (dir) (not (top-repo-p dir))))))

  (find-repos "~/Documents/github")
  #+end_src

#+RESULTS:
- ~/Documents/github/AgoraDesktop/AgoraInstaller/
- ~/Documents/github/Bogdanp/racket-gui-easy/
- ~/Documents/github/JuliaInterop/libcxxwrap-julia/
- ~/Documents/github/SquareBracketAssociates/BuildingApplicationWithSpec2/
- ~/Documents/github/apple/swift-corelibs-libdispatch/
- ~/Documents/github/chrisballinger/powerplant/
- ~/Documents/github/dylan-lang/dylan-emacs-support/
- ~/Documents/github/dylan-lang/opendylan/
- ~/Documents/github/etoile/Etoile/
- ~/Documents/github/fniessen/org-macros/
- ~/Documents/github/gnustep/apps-gorm/
- ~/Documents/github/gnustep/apps-gworkspace/
- ~/Documents/github/gnustep/apps-projectcenter/
- ~/Documents/github/gnustep/apps-systempreferences/
- ~/Documents/github/gnustep/gap/
- ~/Documents/github/gnustep/libobjc2/
- ~/Documents/github/gnustep/libs-back/
- ~/Documents/github/gnustep/libs-base/
- ~/Documents/github/gnustep/libs-corebase/
- ~/Documents/github/gnustep/libs-gui/
- ~/Documents/github/gnustep/libs-opal/
- ~/Documents/github/gnustep/libs-quartzcore/
- ~/Documents/github/gnustep/libs-renaissance/
- ~/Documents/github/gnustep/libs-ruby/
- ~/Documents/github/gnustep/tests-examples/
- ~/Documents/github/gnustep/tools-make/
- ~/Documents/github/kenjirofukuda/Mousetrap.jl/
- ~/Documents/github/kenjirofukuda/_hiki/
- ~/Documents/github/kenjirofukuda/apps-projectcenter/
- ~/Documents/github/kenjirofukuda/cl-sandbox/
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/
- ~/Documents/github/kenjirofukuda/gnustep-examples/
- ~/Documents/github/kenjirofukuda/gs-desktop/
- ~/Documents/github/kenjirofukuda/libs-base/
- ~/Documents/github/kenjirofukuda/libs-gui/
- ~/Documents/github/kenjirofukuda/libs-renaissance/
- ~/Documents/github/kenjirofukuda/mknfonts.tool/
- ~/Documents/github/kenjirofukuda/mousetrap/
- ~/Documents/github/kenjirofukuda/mousetrap_julia_binding/
- ~/Documents/github/kenjirofukuda/sandbox/
- ~/Documents/github/kenjirofukuda/tests-examples/
- ~/Documents/github/lem-project/lem/
- ~/Documents/github/lszl84/wx_cmake_template/
- ~/Documents/github/minivmac/
- ~/Documents/github/onflapp/gs-desktop/
- ~/Documents/github/protocolbuffers/protobuf/
- ~/Documents/github/racket/
- ~/Documents/github/racket/drracket/
- ~/Documents/github/rizsotto/Bear/
- ~/Documents/github/roswell/
- ~/Documents/github/sezanzeb/input-remapper/
- ~/Documents/github/swiftlang/swift-corelibs-libdispatch/
- ~/Documents/github/trunkmaster/nextspace/

* TODO Menuがホストのデスクトップに隠れてしま件う件
NSMenu がホストのDockやメニューバーの背後に隠れてしまう。
デフォルトの原点が top left なのは理解できるが、GWorkspaceのleft bottom に並ぶ起動済みアプリケーションのアイコンはDockに隠れることなく、表示されている。
しかも、=[Ubuntu Desktop][Dock][Icon size]=を更新すると、それに合わせてデスクトップ領域が追従するのである。この仕掛けをNSMenuに適用させたい。
アイコンも内部的には(X11の観点から)はウィンドウのはずである。
Window はデスクトップ環境からはみ出すのに、アイコンははみ出さないできっちりデスクトップ領域に収まっている。
不思議だ。

#+begin_src
GWDesktopView << FSNIconsView << NSView <NSTextFieldDelegate>
#+end_src

* TODO GWorkspaceのFile Viewer にアイコンをドロップできない件
現在、GWorkspaceのお気に入り領域にアイコンを登録できなくて難儀している。なぜなのか?


* 無関係
ここは執筆中に本テーマに無関係なことを思いついたときに記述する場所である。
** TODO githubのリンク上であるキーを押したら自動的にpullする
** org の絞り込みからの脱出
https://emacs.stackexchange.com/questions/57839/opposite-of-org-narrow-to-subtree
Q: C-x n s にフォーカスを絞り込むがどうやってもとに戻すのか?
A: C-x n w で復帰できる
** TODO orgの右端が隠れてしまう件
特定のファイルで、右端が80カラムで隠れてしまう。すべてが同じ隠れ方をするのなら原因を特定しやすいがファイルによって挙動が異なるのが解せない。
visual-line-modeは折返しをしてくれて便利だが、off にトグルでターンするとき、visual-fill-column-mode も同時に行ってくれないので２つのコマンドを常に発行しなければならない。
