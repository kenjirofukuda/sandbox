#+TITLE: Haiku

* ファイルレイアウトの違い

| /usr/bin/env | /bin/env                    |
| ~/.bashrc    | ~/config/settings/bashrc    |
| ~/vimrc      | ~/config/settings/vim/vimrc |

* Ready To Jamfile
#+begin_src bash
  #!/bin/bash
  remote_url="https://raw.githubusercontent.com/augiedoggie/jam-mode/refs/heads/main/jam-mode.el"
  local_file="$HOME/.emacs.d/lisp/jam-mode.el"
  if [ ! -f "$local_file" ]; then
      cd "$HOME/.emacs.d/lisp/"
      curl -O "$remote_url"
  fi
#+end_src

#+RESULTS:

* Ready to haiku format
#+begin_src bash
  . ~/Documents/github/kenjirofukuda/sandbox/bootstrap/common.sh
  ensure_repo "owenca" "haiku-format"
  which "haiku-format"
#+end_src

#+RESULTS:
| mkdir | -p                                              | /boot/home/Documents/github/owenca |               |
| cd    | /boot/home/Documents/github/owenca/haiku-format |                                    |               |
| git   | fetch                                           |                                    |               |
| git   | diff                                            | master                             | origin/master |
|       |                                                 |                                    |               |


* minimul app
** TestApp.cpp
#+begin_src c++ :tangle TestApp.cpp
  #include <Application.h>
  #include <Window.h>

  int
  main (int argc, char **argv)
  {
    BApplication app("application/x-vnd.me-TestApp");
    BWindow *win = new BWindow(BRect (0, 0, 640, 480),
                               "TestApp",
                               B_TITLED_WINDOW,
                               B_QUIT_ON_WINDOW_CLOSE);
    win->CenterOnScreen();
    win->Show();
    app.Run();
    return 0;
  }
#+end_src

** Jamfile
template file: /system/develop/etc/Jamfile
#+begin_src jam :tangle Jamfile
  ## Haiku Generic Jamfile v1.0.3 ##

  ## Fill in this file to specify the project being created, and the referenced
  ## Jamfile-engine will do all of the hard work for you.  This handles both
  ## Intel and PowerPC builds of BeOS and Haiku.

  ## Application Specific Settings ---------------------------------------------

  # Specify the name of the binary
  #	If the name has spaces, you must quote it: "My App"
  NAME = TestApp ;

#+end_src

#+begin_src jam :tangle Jamfile
  # Specify the type of binary
  #	APP:	Application
  #	SHARED:	Shared library or add-on
  #	STATIC:	Static library archive
  #	DRIVER: Kernel Driver
  TYPE = APP ;

#+end_src

#+begin_src jam :tangle Jamfile
  # Specify the application MIME signature, if you plan to use localization
  # 	features. String format x-vnd.<VendorName>-<AppName> is recommended.
  APP_MIME_SIG = "x-vnd.me-TestApp" ;

#+end_src

#+begin_src jam :tangle Jamfile
  # Specify the source files to use
  #	Full paths or paths relative to the Jamfile can be included.
  # 	All files, regardless of directory, will have their object
  #	files created in the common object directory.
  #	Note that this means this Jamfile will not work correctly
  #	if two source files with the same name (source.c or source.cpp)
  #	are included from different directories.
  # Ex: SRCS = file1.cpp file2.cpp file3.cpp ;
  SRCS = TestApp.cpp ;

#+end_src

#+begin_src jam :tangle Jamfile
  # Specify the resource files to use
  #	Full path or a relative path to the resource file can be used.
  RSRCS =  ;

#+end_src

#+begin_src jam :tangle Jamfile
  # Additionally specify the path of rdef files to compile and add to resources
  RDEFS =  ;

#+end_src

#+begin_src jam :tangle Jamfile
  # Specify additional libraries to link against
  #	There are two acceptable forms of library specifications
  #	-	if your library follows the naming pattern of:
  #		libXXX.so or libXXX.a you can simply specify XXX
  #		library: libbe.so entry: be
  #
  #	-	for localization support add following libs:
  #		locale localestub
  #
  #	- 	if your library does not follow the standard library
  #		naming scheme you need to specify the path to the library
  #		and it's name
  #		library: my_lib.a entry: my_lib.a or path/my_lib.a
  LIBS =
           be
           stdc++
           supc++
  ;

  # Specify additional paths to directories following the standard
  #	libXXX.so or libXXX.a naming scheme.  You can specify full paths
  #	or paths relative to the Jamfile.  The paths included may not
  #	be recursive, so include all of the paths where libraries can
  #	be found.  Directories where source files are found are
  #	automatically included.
  LIBPATHS =  ;

#+end_src

#+begin_src jam :tangle Jamfile
  # Additional paths to look for system headers
  #	These use the form: #include <header>
  #	source file directories are NOT auto-included here
  SYSTEM_INCLUDE_TOP = /system/develop/headers ;
  SYSTEM_INCLUDE_PATHS = [ FDirName $(SYSTEM_INCLUDE_TOP) private interface ] ;

#+end_src

#+begin_src jam :tangle Jamfile
  # Additional paths to look for local headers
  #	thes use the form: #include "header"
  #	source file directories are automatically included
  LOCAL_INCLUDE_PATHS =  ;

#+end_src

#+begin_src jam :tangle Jamfile
  # Specify the level of optimization that you desire
  #	NONE, SOME, FULL
  OPTIMIZE = NONE ;

#+end_src

#+begin_src jam :tangle Jamfile
  # Specify the codes for languages you are going to support in this
  # 	application. The default "en" one must be provided too. "jam catkeys"
  # 	will recreate only locales/en.catkeys file. Use it as template for
  # 	creating other languages catkeys. All localization files must be
  # 	placed in "locales" sub-directory.
  LOCALES =  ;

#+end_src

#+begin_src jam :tangle Jamfile
  # Specify any preprocessor symbols to be defined.  The symbols will not
  #	have their values set automatically; you must supply the value (if any)
  #	to use.  For example, setting DEFINES to "DEBUG=1" will cause the
  #	compiler option "-DDEBUG=1" to be used.  Setting DEFINES to "DEBUG"
  #	would pass "-DDEBUG" on the compiler's command line.
  DEFINES = DEBUG=1 ;

#+end_src

#+begin_src jam :tangle Jamfile
  # Specify special warning levels
  #	if unspecified default warnings will be used
  #	NONE = supress all warnings
  #	ALL = enable all warnings
  WARNINGS = ALL ;

#+end_src

デバッグシンボルの生成
#+begin_src jam :tangle Jamfile
  # Specify whether image symbols will be created
  #	so that stack crawls in the debugger are meaningful
  #	if TRUE symbols will be created
  SYMBOLS = TRUE ;

#+end_src

ソースレベルデバッガーの有効化
#+begin_src jam :tangle Jamfile
  # Specify debug settings
  #	if TRUE will allow application to be run from a source-level
  #	debugger.  Note that this will disable all optimzation.
  DEBUGGER = TRUE ;

#+end_src

#+begin_src jam :tangle Jamfile
  # Specify additional compiler flags for all files
  COMPILER_FLAGS =  ;

#+end_src

#+begin_src jam :tangle Jamfile
  # Specify additional linker flags
  LINKER_FLAGS =  ;

#+end_src

#+begin_src jam :tangle Jamfile
  # (for TYPE == DRIVER only) Specify desired location of driver in the /dev
  #	hierarchy. Used by the driverinstall rule. E.g., DRIVER_PATH = video/usb will
  #	instruct the driverinstall rule to place a symlink to your driver's binary in
  #	~/add-ons/kernel/drivers/dev/video/usb, so that your driver will appear at
  #	/dev/video/usb when loaded. Default is "misc".
  DRIVER_PATH =  ;

#+end_src

基本となるルール記述をインクルード
#+begin_src jam :tangle Jamfile
  ## Include the Jamfile-engine
  include $(BUILDHOME)/etc/Jamfile-engine ;

#+end_src

#+begin_src jam :tangle Jamfile
  RunApp run : $(NAME) ;
#+end_src

* AAA
#+begin_src bash
  pwd
  jam -c
#+end_src

#+RESULTS:
| /boot/home/Documents/github/kenjirofukuda/sandbox/haiku |                   |              |
| ...patience...                                          |                   |              |
| ...found                                                | 15                | target(s)... |
| ...updating                                             | 2                 | target(s)... |
| C++                                                     | obj.X86/TestApp.o |              |
| Link                                                    | obj.X86/TestApp   |              |
| Chmod1                                                  | obj.X86/TestApp   |              |
| MimeSet                                                 | obj.X86/TestApp   |              |
| ...updated                                              | 2                 | target(s)... |
